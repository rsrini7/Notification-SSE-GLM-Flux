sequenceDiagram
    participant AdminSvc as Admin Service
    participant OrchestrationTopic as Kafka Topic <br/> (broadcast-group-orchestration)
    participant LeaderConsumer as User Service (Leader Pod)
    participant DB as PostgreSQL DB
    participant DeliveryTopic as Kafka Topic <br/> (broadcast-events-selected)
    participant WorkerConsumers as User Service (Worker Pods)
    participant UserUI as User UI (Browser)

    AdminSvc->>+OrchestrationTopic: 1- Publishes ONE event for the group broadcast
    OrchestrationTopic-->>-AdminSvc: 

    Note over OrchestrationTopic, LeaderConsumer: A single pod from the static consumer group receives the event.
    OrchestrationTopic->>+LeaderConsumer: 2- Delivers orchestration event

    LeaderConsumer->>+DB: 3- Fetches the full list of ALL/ROLE users (ONCE)
    DB-->>-LeaderConsumer: Returns 100k user list

    Note over LeaderConsumer, DeliveryTopic: 4- "Scatters" the work by publishing user-specific events.
    loop For each of the 100k users
        LeaderConsumer->>+DeliveryTopic: Publishes CREATED event for a single user
    end
    DeliveryTopic-->>-LeaderConsumer: 
    LeaderConsumer-->>OrchestrationTopic: 5- Acknowledges the orchestration event

    Note over DeliveryTopic, WorkerConsumers: 6- Kafka distributes the 100k events across all worker pods.
    DeliveryTopic->>+WorkerConsumers: 7- Each worker receives a fraction of the events
    
    par Parallel Processing
        WorkerConsumers->>WorkerConsumers: 8a- Process event for User A, D, G...
    and
        WorkerConsumers->>WorkerConsumers: 8b- Process event for User B, E, H...
    and
        WorkerConsumers->>WorkerConsumers: 8c- Process event for User C, F, I...
    end

    Note over WorkerConsumers, UserUI: 9- Each worker pushes messages via SSE only for the users it is responsible for.
    WorkerConsumers->>+UserUI: Push real-time message via SSE