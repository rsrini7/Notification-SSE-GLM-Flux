graph TD
    subgraph "User Action"
        AdminUI[Admin UI]
    end

    subgraph "1. Creation & Triage (Admin Service)"
        AdminAPI["API Layer"]
        LifecycleSvc["BroadcastLifecycleService"]
        CreationTriage{"Broadcast Type?"}
    end

    %% MODIFIED: Schedulers are now represented as one unified service
    subgraph "2. Background Processing (Admin Service)"
        UnifiedScheduler["Unified Scheduler<br/>(BroadcastActivationService)<br/>(Every 1 min)"]
        AsyncPrecomputation["Async TargetingService"]
    end
    
    subgraph "3. Publishing (Admin Service)"
        OutboxPoller["Outbox Polling Service<br/>(Every 2s)"]
    end

    subgraph "4. Delivery (User Service & Infra)"
        OrchestratorConsumer["Orchestrator Consumer (Kafka)"]
        WorkerCqListener["Worker CqListener (Geode)"]
        SseService["SSE Service"]
        Kafka["Kafka (Orchestration Topic)"]
        Geode["Geode (Cache & Eventing)"]
        Postgres["PostgreSQL DB"]
        User[User Browser]
    end
    
    %% --- FLOW START ---
    AdminUI --> AdminAPI --> LifecycleSvc --> CreationTriage

    %% --- PATH A: IMMEDIATE BROADCASTS ---
    CreationTriage -- "Immediate" --> ImmediateType{"Targeting Strategy?"}
    %% MODIFIED: ROLE and SELECTED now follow the same early fan-out path
    ImmediateType -- "Early Fan-out (ROLE/SELECTED)" --> SaveActiveAndOutboxBatch["DB: status=ACTIVE<br/>BATCH INSERT N events into outbox_events"]
    ImmediateType -- "Fan-out on Read (ALL)" --> SaveActiveAndOutboxSingle["DB: status=ACTIVE<br/>INSERT ONE event into outbox_events"]
    ImmediateType -- "Fan-out on Write (PRODUCT)" --> SavePreparing["DB: status=PREPARING"]
    
    SavePreparing -- "Triggers" --> AsyncPrecomputation

    %% --- PATH B: SCHEDULED BROADCASTS ---
    CreationTriage -- "Scheduled" --> SaveScheduled["DB: status=SCHEDULED"]
    SaveScheduled -- "Handled by" --> UnifiedScheduler
    
    %% --- PRECOMPUTATION & ACTIVATION FLOW ---
    %% MODIFIED: Description now reflects writing to user_broadcast_messages
    AsyncPrecomputation -- "Saves user messages & sets status=READY" --> Postgres
    Postgres -- "status=READY" --> UnifiedScheduler
    
    UnifiedScheduler -- "Polls for READY or<br/>due SCHEDULED broadcasts" --> Postgres
    UnifiedScheduler --> SaveActiveAndOutboxSingle
    
    %% --- CONVERGENCE & PUBLISHING ---
    SaveActiveAndOutboxSingle --> Postgres
    SaveActiveAndOutboxBatch --> Postgres
    Postgres -- "Events wait in 'outbox_events'" --> OutboxPoller
    OutboxPoller -- "Polls & Locks Events" --> Postgres
    OutboxPoller -- "Publishes Events" --> Kafka

    %% --- DELIVERY (Real-time Push Path) ---
    Kafka --> OrchestratorConsumer
    %% MODIFIED: Description of Geode interaction is now more specific
    OrchestratorConsumer -- "Looks up user pod, Puts event<br/>into 'sse-user-messages' region" --> Geode
    Geode -- "CQ invokes Listener on correct pod" --> WorkerCqListener
    WorkerCqListener --> SseService
    SseService -- "Pushes via SSE" --> User