graph TD
    subgraph "Frontend"
        AdminUser[Admin User]
        ReactUI[React Frontend App]
    end

    subgraph "Admin Service"
        direction LR
        AdminAPI["API Layer"]
        
        subgraph "Business Logic & Schedulers"
            LifecycleSvc[BroadcastLifecycleService]
            TargetingSvc["TargetingService <br/> (Async User Fetch)"]
            PrecompScheduler["Pre-computation Scheduler <br/> (SCHEDULED -> PREPARING)"]
            ActivationScheduler["Activation Scheduler <br/> (READY -> ACTIVE)"]
            OutboxPoller[Outbox Poller]
        end
    end
    
    subgraph "User Service"
        direction LR
        subgraph "Kafka Consumers"
            OrchestratorConsumer["Orchestrator Consumer (Leader)"]
            WorkerConsumer[Worker Consumer]
        end
        SseService[SseService]
    end

    subgraph "Shared Infrastructure"
        Kafka[Kafka Broker]
        Postgres["PostgreSQL DB <br/> - broadcast_messages <br/> - broadcast_user_targets <br/> - outbox_events"]
        Redis["Redis Cache <br/> - online-users <br/> - pending-events"]
    end

    %% Define Styles
    classDef frontend fill:#d4edff,stroke:#333
    classDef admin fill:#fff2cc,stroke:#333
    classDef user fill:#e2f0d9,stroke:#333
    classDef infra fill:#cce5ff,stroke:#333
    
    class AdminUser,ReactUI frontend
    class AdminAPI,LifecycleSvc,TargetingSvc,PrecompScheduler,ActivationScheduler,OutboxPoller admin
    class OrchestratorConsumer,WorkerConsumer,SseService user
    class Kafka,Postgres,Redis infra

    %% --- Start of Flow ---
    AdminUser -- "Creates Broadcast" --> ReactUI
    ReactUI -- "1- POST /broadcasts" --> AdminAPI
    AdminAPI --> LifecycleSvc

    %% --- Path A: Scheduled Broadcast ---
    LifecycleSvc -- "2a- (If Scheduled)" --> SaveAsScheduled("DB: status = SCHEDULED")
    SaveAsScheduled --> Postgres
    PrecompScheduler -- "3- Polls for due broadcasts" --> Postgres
    PrecompScheduler -- "4- Claims broadcast" --> UpdateToPreparing("DB: status = PREPARING")
    UpdateToPreparing --> LifecycleSvc
    LifecycleSvc -- "5- Triggers async fetch" --> TargetingSvc
    TargetingSvc -- "6- Fetches users & stores targets" --> Postgres
    TargetingSvc -- "7- Marks as ready" --> UpdateToReady("DB: status = READY")
    UpdateToReady --> Postgres
    ActivationScheduler -- "8- Polls for READY broadcasts" --> Postgres
    ActivationScheduler -- "9- Activates & writes Outbox Event" --> FinalSave("DB: status = ACTIVE")
    
    %% --- Path B: Immediate Broadcast ---
    LifecycleSvc -- "2b- (If Immediate)" --> UpdateToPreparing
    
    %% --- Common Path: Publishing ---
    FinalSave --> Postgres
    OutboxPoller -- "10- Polls outbox_events table" --> Postgres
    OutboxPoller -- "11- Publishes event to Kafka" --> Kafka

    %% --- Kafka to User Service Fan-Out ---
    Kafka -- "12a- (Group) Single Orchestration Event" --> OrchestratorConsumer
    OrchestratorConsumer -- "13- Reads pre-computed user list" --> Postgres
    OrchestratorConsumer -- "14- Scatters User-Specific Events" --> Kafka

    Kafka -- "12b- (Selected) Publishes User-Specific Event" --> WorkerConsumer

    %% --- Final Delivery ---
    Kafka -- "15- Worker receives User-Specific Event" --> WorkerConsumer
    WorkerConsumer -- "16- Checks Redis for User Status" --> Redis
    Redis -- "17a- (Online)" --> WorkerConsumer
    WorkerConsumer -- "18- Forwards to SSE Service for delivery" --> SseService
    SseService -- "19- Pushes Message via SSE" --> ReactUI
    SseService -- "20a- (If 'SELECTED')<br/>Updates user_broadcast_messages" --> Postgres
    SseService -- "20b- (If 'GROUP')<br/>Increments broadcast_statistics" --> Postgres

    Redis -- "17b- (Offline)" --> WorkerConsumer
    WorkerConsumer -- "18b- Caches Pending Event in Redis" --> Redis