sequenceDiagram
    participant AdminUI as Admin UI
    participant AdminSvc as Admin Service
    participant DB as PostgreSQL DB
    participant OutboxPoller as Outbox Poller (Scheduler)
    participant Kafka as Kafka Broker
    participant UserSvc as User Service (Consumer)
    participant Redis as Redis Cache
    participant SseSvc as SSE Service
    participant UserUI as User UI (Browser)

    AdminUI->>+AdminSvc: 1- POST /api/admin/broadcasts
    Note over AdminSvc, DB: 2- DB Transaction Begins
    AdminSvc->>DB: INSERT to broadcast_messages
    AdminSvc->>DB: INSERT to outbox_events (type='CREATED')
    Note over AdminSvc, DB: Transaction Commits
    AdminSvc-->>-AdminUI: 3- Returns 200 OK

    %% Asynchronous Flow via Kafka
    loop Every 2 Seconds
        OutboxPoller->>+DB: 4- SELECT & LOCK from outbox_events
        DB-->>-OutboxPoller: Returns new event
    end
    OutboxPoller->>+Kafka: 5- Publish CREATED Event
    Kafka-->>-OutboxPoller: Acknowledged
    OutboxPoller->>+DB: 6- DELETE from outbox_events
    DB-->>-OutboxPoller: Success

    Kafka->>+UserSvc: 7- Delivers CREATED Event
    UserSvc->>+Redis: 8- Is user online?
    Redis-->>-UserSvc: Returns online status

    alt User is Online
        UserSvc->>+SseSvc: 9a- handleMessageEvent()
        SseSvc->>DB: UPDATE user_message status to DELIVERED
        SseSvc->>+UserUI: 10a- Push Real-time Message via SSE
        UserUI-->>-SseSvc: 
    else User is Offline
        UserSvc->>+Redis: 9b- Store message in 'pending-evt:<userId>'
        Redis-->>-UserSvc: Success
    end