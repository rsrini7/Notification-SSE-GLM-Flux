graph TD
    subgraph "Container Boundary: User Service"
        direction LR

        subgraph "API Layer"
            UserControllers["<div style='font-weight:bold'>*User & SSE Controllers*</div><div style='font-size: smaller;'>Spring @RestController</div><div style='font-size: smaller;'>Handles user API calls and establishes persistent SSE connections.</div>"]
        end

        subgraph "Real-time & Service Layer"
            SseService["<div style='font-weight:bold'>SseService</div><div style='font-size: smaller;'>High-level service for managing SSE event streams and logic.</div>"]
            SseManager["<div style='font-weight:bold'>SseConnectionManager</div><div style='font-size: smaller;'>Low-level, in-memory management of active SSE sinks on this pod.</div>"]
            UserMessageService["<div style='font-weight:bold'>UserMessageService</div><div style='font-size: smaller;'>Handles business logic for user messages (fetching, marking as read).</div>"]
        end
        
        subgraph "Kafka Consumers"
            Orchestrator["<div style='font-weight:bold'>KafkaBroadcastOrchestratorService</div><div style='font-size: smaller;'>*Leader Consumer*<br/>(Static Group ID)<br/>Receives single events and scatters the work.</div>"]
            WorkerConsumer["<div style='font-weight:bold'>KafkaConsumerService</div><div style='font-size: smaller;'>*Worker Consumers*<br/>(Dynamic Group ID)<br/>Process fanned-out, user-specific events.</div>"]
        end

        subgraph "Data Access & Distributed State"
            Repositories["<div style='font-weight:bold'>Repositories</div><div style='font-size: smaller;'>- UserBroadcastRepository<br/>- BroadcastRepository</div>"]
            RedisManager["<div style='font-weight:bold'>RedisCacheService</div><div style='font-size: smaller;'>Manages distributed user presence and session information in Redis.</div>"]
        end
    end

    %% External Systems
    UserUI[User UI]
    Kafka[Kafka Broker]
    Postgres[PostgreSQL DB]
    Redis[Redis Cache]
    
    %% Relationships
    UserUI -- "HTTPS / SSE" --> UserControllers
    UserControllers --> SseService
    UserControllers --> UserMessageService
    
    SseService --> SseManager
    SseService --> RedisManager
    UserMessageService --> Repositories
    UserMessageService --> RedisManager

    Orchestrator -- "Consumes Orchestration Events" --> Kafka
    Orchestrator -- "Publishes User-Specific Events" --> Kafka
    Orchestrator --> Repositories
    
    WorkerConsumer -- "Consumes User-Specific Events" --> Kafka
    WorkerConsumer --> SseService
    
    Repositories --> Postgres
    RedisManager --> Redis