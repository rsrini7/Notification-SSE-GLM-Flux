graph TD
    subgraph "Container Boundary: User Service"
        direction LR

        subgraph "API Layer"
            UserControllers["<div style='font-weight:bold'>*User & SSE Controllers*</div><div style='font-size: smaller;'>Spring @RestController</div><div style='font-size: smaller;'>Handles user API calls and establishes persistent SSE connections.</div>"]
        end

        subgraph "Real-time & Service Layer"
            SseService["<div style='font-weight:bold'>SseService</div><div style='font-size: smaller;'>High-level service for managing SSE event streams and logic.</div>"]
            SseManager["<div style='font-weight:bold'>SseConnectionManager</div><div style='font-size: smaller;'>Low-level, in-memory management of active SSE sinks on this pod.</div>"]
            UserMessageService["<div style='font-weight:bold'>UserMessageService</div><div style='font-size: smaller;'>Handles business logic for user messages (fetching, marking as read).</div>"]
        end
        
        subgraph "Event Consumers"
            Orchestrator["<div style='font-weight:bold'>KafkaOrchestratorConsumerService</div><div style='font-size: smaller;'>*Kafka Consumer*<br/>Consumes orchestration events from Kafka.</div>"]
            CqListener["<div style='font-weight:bold'>SseMessageCqListener</div><div style='font-size: smaller;'>*Geode Continuous Query Listener*<br/>Receives user-specific events reactively from the Geode cluster.</div>"]
        end

        subgraph "Data Access & Distributed State"
            Repositories["<div style='font-weight:bold'>Repositories</div><div style='font-size: smaller;'>- UserBroadcastRepository<br/>- BroadcastRepository</div>"]
            GeodeManager["<div style='font-weight:bold'>GeodeCacheService</div><div style='font-size: smaller;'>Manages distributed state in Geode (user presence, cache, heartbeats).</div>"]
        end
    end

    %% External Systems
    UserUI[User UI]
    Kafka[Kafka Broker]
    Postgres[PostgreSQL DB]
    Geode[Apache Geode Cluster]
    
    %% Relationships
    UserUI -- "HTTPS / SSE" --> UserControllers
    UserControllers --> SseService
    UserControllers --> UserMessageService
    
    SseService --> SseManager
    SseService --> GeodeManager
    UserMessageService --> Repositories
    UserMessageService --> GeodeManager

    Orchestrator -- "Consumes Orchestration Events" --> Kafka
    Orchestrator -- "Puts events into Geode" --> GeodeManager
    
    CqListener -- "Receives CQ events from" --> Geode
    CqListener --> SseService
    
    Repositories --> Postgres
    GeodeManager --> Geode