sequenceDiagram
    participant AdminSvc as Admin Service
    participant DB as PostgreSQL DB
    participant OutboxPoller as Outbox Poller
    participant Kafka as Kafka Broker
    participant UserSvc as User Service
    participant Redis as Redis Cache
    participant SseSvc as SSE Service
    participant UserUI as User UI (Browser)

    Note over AdminSvc: Part 1: Real-time Message Delivery
    AdminSvc->>+DB: 1- Writes CREATED event to Outbox
    DB-->>-AdminSvc: 

    OutboxPoller->>+Kafka: 2- Polls and publishes CREATED event
    Kafka-->>-OutboxPoller: 
    
    Kafka->>+UserSvc: 3- Delivers CREATED Event
    UserSvc->>+Redis: 4- Is user online?
    Redis-->>-UserSvc: returns true

    UserSvc->>+SseSvc: 5- handleMessageEvent()
    SseSvc->>DB: 6- UPDATE user_message status to DELIVERED
    SseSvc->>+UserUI: 7- Pushes MESSAGE event via SSE
    UserUI-->>-SseSvc: 

    Note over UserUI, UserSvc: Part 2: User Marks Message as Read
    UserUI->>+UserSvc: 8- POST /api/user/messages/read
    Note over UserSvc, DB: DB Transaction Begins
    UserSvc->>DB: 9- UPDATE user_message status to READ
    UserSvc->>DB: 10- UPDATE broadcast_statistics (increment read_count)
    UserSvc->>DB: 11- INSERT to outbox_events (type='READ')
    Note over UserSvc, DB: Transaction Commits
    UserSvc-->>-UserUI: 12- Returns 200 OK

    Note right of Kafka: ...Outbox Poller runs again...
    OutboxPoller->>+Kafka: 13- Publishes READ Event
    Kafka-->>-OutboxPoller: 

    Kafka->>+UserSvc: 14- Delivers READ event
    UserSvc->>+UserUI: 15- Pushes READ_RECEIPT event via SSE
