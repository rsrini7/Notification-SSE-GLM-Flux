# Define reusable base configurations
x-nginx-base: &nginx_base
  build: ./broadcast-frontend
  image: broadcast-nginx:1.0.5
  ports:
    - "443:443"

services:
  # ===================================================================
  #  DEV PROFILE SERVICES
  # ===================================================================
  nginx-dev:
    profiles:
      - dev
    <<: *nginx_base
    volumes:
      - ./broadcast-frontend/localhost.pem:/etc/nginx/certs/localhost.pem
      - ./broadcast-frontend/localhost-key.pem:/etc/nginx/certs/localhost-key.pem
    environment:
      - NGINX_ENV=dev
      - ADMIN_BACKEND_URL=https://host.docker.internal:8081
      - USER_BACKEND_URL=https://host.docker.internal:8082

  # Kafka service for the 'dev' profile
  kafka-dev:
    profiles:
      - dev
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  # ===================================================================
  #  PROD PROFILE SERVICES
  # ===================================================================
  nginx-prod:
    profiles:
      - prod
    <<: *nginx_base
    volumes:
      - ./broadcast-frontend/localhost.pem:/etc/nginx/certs/tls.crt
      - ./broadcast-frontend/localhost-key.pem:/etc/nginx/certs/tls.key
    environment:
      - NGINX_ENV=prod
      - ADMIN_BACKEND_URL=https://admin-service:8081
      - USER_BACKEND_URL=https://user-service:8082
    depends_on:
      admin-service:
        condition: service_started
      user-service:
        condition: service_started

  # Kafka service for the 'prod' profile
  kafka-prod:
    profiles:
      - prod
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-prod:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  admin-service:
    profiles:
      - prod
    image: broadcast-admin-service:1.0.0
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=dev-pg
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/broadcastdb
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka-prod:9092
      - LOGGING_FILE_NAME=/var/log/app/broadcast-admin-service.log
    volumes:
      - ./logs/admin:/var/log/app
    depends_on:
      - kafka-prod
      - postgres
      - redis

  user-service:
    profiles:
      - prod
    image: broadcast-user-service:1.0.0
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=dev-pg
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/broadcastdb
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka-prod:9092
      - LOGGING_FILE_NAME=/var/log/app/broadcast-user-service.log
    volumes:
      - ./logs/user:/var/log/app
    depends_on:
      - kafka-prod
      - postgres
      - redis
      - admin-service

  # ===================================================================
  #  COMMON INFRASTRUCTURE SERVICES (always run)
  # ===================================================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log

  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: broadcastdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: ["-c", "max_connections=300"]

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data: