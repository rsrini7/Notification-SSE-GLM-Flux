networks:
  broadcast-net:
    driver: bridge

# Define reusable base configurations
x-nginx-base: &nginx_base
  build: ./broadcast-frontend
  image: broadcast-nginx:1.0.5
  ports:
    - "443:443"
  networks:
    - broadcast-net

services:
  # ===================================================================
  #  DEV PROFILE SERVICES
  # ===================================================================
  nginx-dev:
    profiles:
      - dev
    <<: *nginx_base
    container_name: nginx-dev
    volumes:
      - ./broadcast-frontend/localhost.pem:/etc/nginx/certs/localhost.pem
      - ./broadcast-frontend/localhost-key.pem:/etc/nginx/certs/localhost-key.pem
    environment:
      - NGINX_ENV=dev
      - ADMIN_BACKEND_URL=https://host.docker.internal:8081
      - USER_BACKEND_URL=https://host.docker.internal:8082
    depends_on:
      kafka-dev-setup:
        condition: service_completed_successfully
  
  # Short-lived service to create Kafka topics.
  kafka-dev-setup:
    profiles:
      - dev
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-dev-setup
    depends_on:
      - kafka-dev
    volumes:
      - kafka_data_dev_setup:/var/lib/kafka/data
      - ./create-kafka-topics.sh:/tmp/create-kafka-topics.sh
    environment:
      - KAFKA_BROKER_ADDRESS=kafka-dev:29092
    command: ["sh", "-c", "echo 'Waiting 5s for dev Kafka...' && sleep 5 && /tmp/create-kafka-topics.sh"]
    networks:
      - broadcast-net
  
  # Kafka service for the 'dev' profile
  kafka-dev:
    profiles:
      - dev
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-broker-dev
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-dev:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
    volumes:
      - kafka_data_dev:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - broadcast-net

  # ===================================================================
  #  PROD PROFILE SERVICES
  # ===================================================================
  nginx-prod:
    profiles:
      - prod
    <<: *nginx_base
    container_name: nginx-prod
    volumes:
      - kafka_data_prod_setup:/var/lib/kafka/data
      - ./broadcast-frontend/localhost.pem:/etc/nginx/certs/tls.crt
      - ./broadcast-frontend/localhost-key.pem:/etc/nginx/certs/tls.key
    environment:
      - NGINX_ENV=prod
      - ADMIN_BACKEND_URL=https://admin-service:8081
      - USER_BACKEND_URL=https://user-service:8082
    depends_on:
      admin-service:
        condition: service_started
      user-service:
        condition: service_started

  # A short-lived service to create Kafka topics.
  kafka-prod-setup:
    profiles:
      - prod
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-prod-setup
    depends_on:
      - kafka-prod
    volumes:
      - ./create-kafka-topics.sh:/tmp/create-kafka-topics.sh
    environment:
      - KAFKA_BROKER_ADDRESS=kafka-prod:29093
    command: ["sh", "-c", "echo 'Waiting 5s for prod Kafka...' && sleep 5 && /tmp/create-kafka-topics.sh"]
    networks:
      - broadcast-net

  # Kafka service for the 'prod' profile
  kafka-prod:
    profiles:
      - prod
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka-broker-prod
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-prod:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
    volumes:
      - kafka_data_prod:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - broadcast-net

  admin-service:
    profiles:
      - prod
    image: broadcast-admin-service:1.0.0
    ports:
      - "8081:8081"
    environment:
      - JAVA_OPTS=-Duser.timezone=Asia/Kolkata -Xms512m -Xmx1g
      - SPRING_PROFILES_ACTIVE=dev-pg
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/broadcastdb
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka-prod:29093
      - LOGGING_FILE_NAME=/var/log/app/broadcast-admin-service.log
    volumes:
      - ./logs/admin:/var/log/app
    depends_on:
      kafka-prod-setup:
        condition: service_completed_successfully
      postgres:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - broadcast-net

  user-service:
    profiles:
      - prod
    image: broadcast-user-service:1.0.0
    deploy:
      replicas: 3
    environment:
      - JAVA_OPTS=-Duser.timezone=Asia/Kolkata -Xms512m -Xmx1g    
      - SPRING_PROFILES_ACTIVE=dev-pg
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/broadcastdb
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka-prod:29093
      - LOGGING_FILE_NAME=/var/log/app/broadcast-user-service.log
      - POD_NAME=docker-pod-${COMPOSE_REPLICA_NUMBER:-0}
    volumes:
      - ./logs/user:/var/log/app
    depends_on:
      kafka-prod-setup:
        condition: service_completed_successfully
      postgres:
        condition: service_started
      redis:
        condition: service_started
      admin-service:
        condition: service_started
    networks:
      - broadcast-net

  # ===================================================================
  #  COMMON INFRASTRUCTURE SERVICES
  # ===================================================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - broadcast-net

  postgres:
    image: postgres:15
    container_name: postgres_db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: broadcastdb
      TZ: Asia/Kolkata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: ["-c", "max_connections=300"]
    networks:
      - broadcast-net

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - broadcast-net

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data_dev:
  kafka_data_dev_setup:
  kafka_data_prod:
  kafka_data_prod_setup: