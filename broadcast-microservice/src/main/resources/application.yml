server:
  port: 8081
  servlet:
    context-path: /api
  shutdown: graceful

spring:
  application:
    name: broadcast-microservice
  
  # h2 Database Configuration (default)
  datasource:
    url: jdbc:h2:mem:broadcastdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MODE=PostgreSQL
    driver-class-name: org.h2.Driver
    username: sa
    password: password
  h2:
    console:
      enabled: true
      path: /h2-console
  
  # SQL Initialization for schema and data
  sql:
    init:
      mode: always
      schema-locations: classpath:sql/schema.sql
      data-locations: classpath:sql/data.sql
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 5
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: broadcast-service-group
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages: "*"
        max.poll.records: 500
        fetch.max.wait.ms: 1000
    listener:
      ack-mode: MANUAL_IMMEDIATE
      concurrency: 3
  
  # Jackson Configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
    time-zone: UTC

# Management and Monitoring Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,circuitbreakers,bulkheads
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
      validate-group-membership: false # Allows the app to start even if Kafka isn't available
      group:
        readiness:
          include: db,kafka
        liveness:
          include: ping

# Logging Configuration
logging:
  level:
    com.example.broadcast: DEBUG
    org.springframework.kafka: WARN
    org.springframework.web: WARN
    org.springframework.jdbc: DEBUG
    io.github.resilience4j: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/broadcast-microservice.log

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      userService:
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
  bulkhead:
    instances:
      userService:
        maxConcurrentCalls: 10
        maxWaitDuration: 10ms

# Custom Configuration
broadcast:
  # SSE Configuration
  sse:
    timeout: 300000  # 5 minutes
    heartbeat-interval: 30000  # 30 seconds
    
  # Caffeine Cache Configuration
  cache:
    user-connections:
      maximum-size: 50000
      expire-after-write: 1h
    user-messages:
      maximum-size: 100000
      expire-after-write: 24h
      
  # Database Configuration
  db:
    batch-size: 1000
    connection-pool-size: 50
    
  # Kafka Configuration
  kafka:
    topic:
      name: broadcast-events
      partitions: 10
      replication-factor: 1
    retry:
      max-attempts: 3
      backoff-delay: 1000

---
# NEW: PostgreSQL-specific profile
spring:
  config:
    activate:
      on-profile: "dev-pg"
  datasource:
    url: jdbc:postgresql://localhost:5432/broadcastdb
    driver-class-name: org.postgresql.Driver
    username: user
    password: password
  # For a persistent DB, you usually want more control over schema creation.
  # 'none' prevents Spring from running schema.sql automatically.
  # Use a migration tool like Flyway for production.
  sql:
    init:
      mode: never