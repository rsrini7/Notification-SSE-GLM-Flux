-- Broadcast Messaging Database Schema
-- Designed for high-scale operations with 400K+ users and 30K+ concurrent connections

-- Enable h2 PostgreSQL compatibility mode
-- SET MODE PostgreSQL;

-- =================================================================
-- DROP ALL OBJECTS SECTION
-- This section ensures a clean slate by dropping all tables and sequences.
-- The CASCADE option automatically removes dependent objects like indexes and constraints.
-- =================================================================

DROP TABLE IF EXISTS user_broadcast_messages CASCADE;
DROP TABLE IF EXISTS broadcast_statistics CASCADE;
DROP TABLE IF EXISTS broadcast_messages CASCADE;
DROP TABLE IF EXISTS user_preferences CASCADE;
DROP TABLE IF EXISTS dlt_messages CASCADE;
DROP TABLE IF EXISTS outbox_events CASCADE;
DROP TABLE IF EXISTS shedlock CASCADE;
DROP TABLE IF EXISTS broadcast_user_targets CASCADE;

DROP SEQUENCE IF EXISTS broadcast_seq;
DROP SEQUENCE IF EXISTS user_broadcast_seq;
DROP SEQUENCE IF EXISTS stats_seq;
DROP SEQUENCE IF EXISTS preferences_seq;


-- =================================================================
-- CREATE ALL OBJECTS SECTION
-- This section creates all tables, indexes, and sequences from scratch.
-- =================================================================

-- Enable h2 PostgreSQL compatibility mode (keep commented for real PostgreSQL)
-- SET MODE PostgreSQL;

-- Broadcast Messages Table (Admin-side records)
-- Stores permanent records of all broadcasts created by administrators
CREATE TABLE broadcast_messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sender_id VARCHAR(255) NOT NULL,
    sender_name VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    target_type VARCHAR(50) NOT NULL CHECK (target_type IN ('ALL', 'SELECTED', 'ROLE','PRODUCT')),
    target_ids TEXT, -- JSON array of user IDs or role IDs for targeted broadcasts
    priority VARCHAR(20) DEFAULT 'NORMAL' CHECK (priority IN ('LOW', 'NORMAL', 'HIGH', 'URGENT')),
    category VARCHAR(100),
    scheduled_at TIMESTAMP WITH TIME ZONE,
    expires_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'SCHEDULED', 'PREPARING', 'READY', 'EXPIRED', 'CANCELLED', 'FAILED')),
    is_fire_and_forget BOOLEAN DEFAULT false
);

-- User Broadcast Messages Table (User-side records)
-- Tracks delivery and read status for each user per broadcast
CREATE TABLE user_broadcast_messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    broadcast_id BIGINT NOT NULL,
    user_id VARCHAR(255) NOT NULL,
    delivery_status VARCHAR(20) DEFAULT 'PENDING' CHECK (delivery_status IN ('PENDING', 'DELIVERED', 'FAILED', 'SUPERSEDED')),
    read_status VARCHAR(20) DEFAULT 'UNREAD' CHECK (read_status IN ('UNREAD', 'READ')),
    delivered_at TIMESTAMP WITH TIME ZONE,
    read_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (broadcast_id) REFERENCES broadcast_messages(id) ON DELETE CASCADE,
    UNIQUE (broadcast_id, user_id)
);

-- Indexes for performance
CREATE INDEX idx_broadcast_created_at ON broadcast_messages (created_at);
CREATE INDEX idx_broadcast_status ON broadcast_messages (status);
CREATE INDEX idx_broadcast_expires_at ON broadcast_messages (expires_at);
CREATE INDEX idx_broadcast_sender ON broadcast_messages (sender_id);
CREATE INDEX idx_user_broadcast_user_id ON user_broadcast_messages (user_id);
CREATE INDEX idx_user_broadcast_status ON user_broadcast_messages (delivery_status, read_status);
CREATE INDEX idx_user_broadcast_broadcast_id ON user_broadcast_messages (broadcast_id);
CREATE INDEX idx_user_broadcast_created_at ON user_broadcast_messages (created_at);
CREATE INDEX idx_user_broadcast_unread ON user_broadcast_messages (user_id, read_status, delivery_status);

-- Broadcast Statistics Table (for monitoring and analytics)
-- Tracks performance metrics and delivery statistics
CREATE TABLE broadcast_statistics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    broadcast_id BIGINT NOT NULL,
    total_targeted INTEGER NOT NULL,
    total_delivered INTEGER DEFAULT 0,
    total_read INTEGER DEFAULT 0,
    total_failed INTEGER DEFAULT 0,
    avg_delivery_time_ms BIGINT,
    calculated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (broadcast_id) REFERENCES broadcast_messages(id) ON DELETE CASCADE,
    UNIQUE (broadcast_id)
);

-- User Preferences Table (for notification filtering)
-- Stores user preferences for broadcast notifications
CREATE TABLE user_preferences (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL UNIQUE,
    notification_enabled BOOLEAN DEFAULT true,
    email_notifications BOOLEAN DEFAULT true,
    push_notifications BOOLEAN DEFAULT true,
    preferred_categories TEXT, -- JSON array of preferred categories
    quiet_hours_start TIME,
    quiet_hours_end TIME,
    timezone VARCHAR(50) DEFAULT 'UTC',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for analytics and lookups
CREATE INDEX idx_stats_broadcast_id ON broadcast_statistics (broadcast_id);
CREATE INDEX idx_stats_calculated_at ON broadcast_statistics (calculated_at);
CREATE INDEX idx_user_preferences_user_id ON user_preferences (user_id);

-- DLT Messages Table
CREATE TABLE dlt_messages (
    id VARCHAR(255) PRIMARY KEY,
    broadcast_id BIGINT,
    original_key VARCHAR(255),
    original_topic VARCHAR(255) NOT NULL,
    original_partition INT NOT NULL,
    original_offset BIGINT NOT NULL,
    exception_message TEXT,
    exception_stack_trace TEXT,
    failed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    original_message_payload TEXT,
    UNIQUE (broadcast_id, original_key)
);
CREATE INDEX idx_dlt_failed_at ON dlt_messages (failed_at);

-- Outbox Table for the Transactional Outbox pattern
CREATE TABLE outbox_events (
    id UUID PRIMARY KEY,
    aggregate_type VARCHAR(255) NOT NULL,
    aggregate_id VARCHAR(255) NOT NULL,
    event_type VARCHAR(255) NOT NULL,
    topic VARCHAR(255) NOT NULL,
    payload TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_outbox_created_at ON outbox_events (created_at);

-- Sequences for ID generation
CREATE SEQUENCE broadcast_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE user_broadcast_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE stats_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE preferences_seq START WITH 1 INCREMENT BY 1;

-- ShedLock Table for distributed scheduler locks
CREATE TABLE shedlock (
    name VARCHAR(64) NOT NULL PRIMARY KEY,
    lock_until TIMESTAMP(3) NOT NULL,
    locked_at TIMESTAMP(3) NOT NULL,
    locked_by VARCHAR(255) NOT NULL
);
