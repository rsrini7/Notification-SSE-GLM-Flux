server:
  port: 8081 # Admin service port
  shutdown: graceful
  http2:
    enabled: true
  ssl:
    enabled: true
    key-store-type: PKCS12
    key-store: "classpath:keystore.p12"
    key-store-password: "password"
    key-alias: "netty"
spring:
  profiles:
    default: admin-only
  application:
    name: broadcast-admin-service # Admin service name
  threads:
    virtual:
      enabled: true

  # h2 Database Configuration (default)
  datasource:
    url: jdbc:h2:mem:broadcastdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MODE=PostgreSQL
    driver-class-name: org.h2.Driver
    username: sa
    password:
  h2:
    console:
      enabled: false
      path: /h2-console

  # SQL Initialization for schema and data
  sql:
    init:
      mode: always
      schema-locations: classpath:sql/schema.sql
      data-locations: classpath:sql/data.sql
  data:
    redis:
      host: localhost
      port: 6379

  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      properties:
        '[enable.idempotence]': true
        '[max.in.flight.requests.per.connection]': 5
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: ${broadcast.kafka.consumer.dlt-group-id}
      auto-offset-reset: earliest
      properties:
        '[spring.json.trusted.packages]': "*"
        '[max.poll.records]': 500
        '[fetch.max.wait.ms]': 1000
    listener:
      ack-mode: MANUAL_IMMEDIATE
      concurrency: 3

  # Jackson Configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
    time-zone: UTC

# Management and Monitoring Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,env,metrics,prometheus,circuitbreakers,bulkheads,ratelimiters,redis-cache-stats
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
      validate-group-membership: false
      group:
        readiness:
          include: db,kafka,redis
        liveness:
          include: ping

# Logging Configuration
logging:
  level:
    '[com.example.broadcast]': DEBUG
    '[org.springframework.kafka]': WARN
    '[org.springframework.web]': INFO
    '[org.springframework.jdbc]': INFO
    '[io.github.resilience4j]': INFO
    '[org.apache.kafka.clients.admin.AdminClientConfig]': WARN
    '[org.apache.kafka.clients.consumer.ConsumerConfig]': WARN
    '[org.apache.kafka.clients.producer.ProducerConfig]': WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/broadcast-admin-service.log

# Resilience4j Configuration
resilience4j:
  ratelimiter:
    instances:
      createBroadcastLimiter:
        limitForPeriod: 10
        limitRefreshPeriod: 1m
        timeoutDuration: 0
        registerHealthIndicator: true
      sseConnectLimiter:
        limitForPeriod: 200
        limitRefreshPeriod: 1m
        timeoutDuration: 2s
        registerHealthIndicator: true
  circuitbreaker:
    instances:
      userService:
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
  bulkhead:
    instances:
      userService:
        maxConcurrentCalls: 10
        maxWaitDuration: 10ms

# --- CUSTOM PROPERTIES ---
   
broadcast:
  h2-console:
    web-port: "8084" # Admin H2 Console on port 8084
    tcp-port: "9094"

  simulation:
    user-fetch-delay-ms: 120000

  # SSE Configuration
  sse:
    timeout: 300000
    heartbeat-interval: 30000

  # Redis Cache Configuration
  cache:
    user-connections:
      maximum-size: 50000
      expire-after-access: PT1H
    user-messages:
      maximum-size: 100000
      expire-after-write: PT24H
    pending-events:
      maximum-size: 50000
      expire-after-write: PT6H

  # Database Configuration
  db:
    batch-size: 1000
    connection-pool-size: 50

  # Kafka Configuration
  kafka:
    topic:
      name-selected: broadcast-events-selected
      name-group-orchestration: broadcast-group-orchestration
      name-user-group: broadcast-user-events-group
      name-actions-orchestration: broadcast-actions-orchestration
      name-user-actions: broadcast-user-actions
      partitions: 10
      replication-factor: 1
    consumer:
      dlt-group-id: broadcast-dlt-group # Group ID for the DLT listener

---
# PostgreSQL-specific profile
spring:
  config:
    activate:
      on-profile: "dev-pg"
  datasource:
    url: jdbc:postgresql://localhost:5432/broadcastdb
    driver-class-name: org.postgresql.Driver
    username: user
    password: password
    hikari:
      max-lifetime: 1800000 # 30 minutes
      maximum-pool-size: 50 # Set an explicit max size
  sql:
    init:
      mode: always