# ===============================================
# broadcast_messages queries
# ===============================================
broadcast.save = \
    INSERT INTO broadcast_messages \
    (sender_id, sender_name, content, target_type, target_ids, priority, category, scheduled_at, expires_at, status, is_fire_and_forget) \
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
broadcast.update = \
    UPDATE broadcast_messages SET \
    sender_id = ?, sender_name = ?, content = ?, target_type = ?, target_ids = ?, \
    priority = ?, category = ?, scheduled_at = ?, expires_at = ?, status = ?, \
    updated_at = CURRENT_TIMESTAMP \
    WHERE id = ?
broadcast.findById = SELECT * FROM broadcast_messages WHERE id = ?
broadcast.findActiveById = SELECT * FROM broadcast_messages WHERE status = 'ACTIVE' AND id = ?
broadcast.findWithStatsById = \
    SELECT b.*, s.total_targeted, s.total_delivered, s.total_read \
    FROM broadcast_messages b LEFT JOIN broadcast_statistics s ON b.id = s.broadcast_id \
    WHERE b.id = ?
broadcast.findActiveWithStats = \
    SELECT b.*, COALESCE(s.total_targeted, 0) as total_targeted, \
    COALESCE(s.total_delivered, 0) as total_delivered, \
    COALESCE(s.total_read, 0) as total_read \
    FROM broadcast_messages b LEFT JOIN broadcast_statistics s ON b.id = s.broadcast_id \
    WHERE b.status = 'ACTIVE' ORDER BY b.created_at DESC
broadcast.findAllWithStats = \
    SELECT b.*, COALESCE(s.total_targeted, 0) as total_targeted, \
    COALESCE(s.total_delivered, 0) as total_delivered, \
    COALESCE(s.total_read, 0) as total_read \
    FROM broadcast_messages b LEFT JOIN broadcast_statistics s ON b.id = s.broadcast_id \
    ORDER BY b.created_at DESC
broadcast.findScheduledWithStats = \
    SELECT b.*, COALESCE(s.total_targeted, 0) as total_targeted, \
    COALESCE(s.total_delivered, 0) as total_delivered, \
    COALESCE(s.total_read, 0) as total_read \
    FROM broadcast_messages b LEFT JOIN broadcast_statistics s ON b.id = s.broadcast_id \
    WHERE b.status = 'SCHEDULED' ORDER BY b.scheduled_at ASC
broadcast.findExpired = SELECT * FROM broadcast_messages WHERE status = 'ACTIVE' AND expires_at IS NOT NULL AND expires_at <= ?
broadcast.findActiveByTargetType = SELECT * FROM broadcast_messages WHERE status = 'ACTIVE' AND target_type = ?
broadcast.updateStatus = UPDATE broadcast_messages SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?
broadcast.findAndLockReady = \
    SELECT * FROM broadcast_messages \
    WHERE status = 'READY' AND (scheduled_at IS NULL OR scheduled_at <= ?) \
    ORDER BY created_at \
    LIMIT ? \
    FOR UPDATE SKIP LOCKED
broadcast.findFinalizedForCleanup = SELECT * FROM broadcast_messages WHERE status IN ('CANCELLED', 'EXPIRED') AND updated_at < ?
broadcast.findScheduledProductBroadcasts = SELECT * FROM broadcast_messages WHERE status = 'SCHEDULED' AND target_type = 'PRODUCT' AND scheduled_at <= ? FOR UPDATE SKIP LOCKED
broadcast.findAndLockScheduledFanOut = \
    SELECT * FROM broadcast_messages \
    WHERE status = 'SCHEDULED' AND target_type IN ('ALL', 'ROLE', 'SELECTED') AND scheduled_at <= ? \
    ORDER BY scheduled_at \
    LIMIT ? \
    FOR UPDATE SKIP LOCKED

# ===============================================
# user_broadcast_messages queries
# ===============================================
userBroadcast.save = \
    INSERT INTO user_broadcast_messages \
    (broadcast_id, user_id, delivery_status, read_status, delivered_at, read_at) \
    VALUES (?, ?, ?, ?, ?, ?)
userBroadcast.findById = SELECT * FROM user_broadcast_messages WHERE id = ?
userBroadcast.update = UPDATE user_broadcast_messages SET delivery_status = ?, read_status = ?, delivered_at = ?, read_at = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?
userBroadcast.findByUserIdAndBroadcastId = SELECT * FROM user_broadcast_messages WHERE user_id = ? AND broadcast_id = ?
userBroadcast.findByBroadcastId = SELECT * FROM user_broadcast_messages WHERE broadcast_id = ? ORDER BY user_id
userBroadcast.updateDeliveryStatus = UPDATE user_broadcast_messages SET delivery_status = ?, delivered_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP WHERE id = ?
userBroadcast.markAsRead = UPDATE user_broadcast_messages SET read_status = 'READ', read_at = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ? AND read_status = 'UNREAD'
userBroadcast.batchInsert = \
    INSERT INTO user_broadcast_messages \
    (broadcast_id, user_id, delivery_status, read_status, delivered_at, read_at) \
    VALUES (?, ?, ?, ?, ?, ?)
userBroadcast.updateNonFinalStatuses = \
    UPDATE user_broadcast_messages \
    SET delivery_status = ?, updated_at = CURRENT_TIMESTAMP \
    WHERE broadcast_id = ? AND delivery_status IN ('PENDING', 'DELIVERED')
userBroadcast.findReadBroadcastIdsByUserId = SELECT broadcast_id FROM user_broadcast_messages WHERE user_id = ? AND read_status = 'READ'
userBroadcast.findUnreadPendingDeliveredByUserId = SELECT * FROM user_broadcast_messages WHERE user_id = ? AND read_status = 'UNREAD' AND (delivery_status = 'PENDING' OR delivery_status = 'DELIVERED') ORDER BY created_at DESC
userBroadcast.deleteUnreadByBroadcastId = DELETE FROM user_broadcast_messages WHERE broadcast_id = ? AND read_status <> 'READ'

# ===============================================
# broadcast_statistics queries
# ===============================================
stats.save = \
    MERGE INTO broadcast_statistics t \
    USING (VALUES (?, ?, ?, ?, ?, ?)) \
    AS s(broadcast_id, total_targeted, total_delivered, total_read, total_failed, calculated_at) \
    ON t.broadcast_id = s.broadcast_id \
    WHEN MATCHED THEN \
        UPDATE SET total_targeted = s.total_targeted, \
                   total_delivered = s.total_delivered, \
                   total_read = s.total_read, \
                   total_failed = s.total_failed, \
                   calculated_at = s.calculated_at \
    WHEN NOT MATCHED THEN \
        INSERT (broadcast_id, total_targeted, total_delivered, total_read, total_failed, calculated_at) \
        VALUES (s.broadcast_id, s.total_targeted, s.total_delivered, s.total_read, s.total_failed, s.calculated_at)
stats.findByBroadcastId = SELECT * FROM broadcast_statistics WHERE broadcast_id = ?
stats.incrementDelivered = UPDATE broadcast_statistics SET total_delivered = total_delivered + 1, calculated_at = CURRENT_TIMESTAMP WHERE broadcast_id = ?
stats.incrementRead = UPDATE broadcast_statistics SET total_read = total_read + 1, calculated_at = CURRENT_TIMESTAMP WHERE broadcast_id = ?
stats.incrementDeliveredAndTargeted = UPDATE broadcast_statistics SET total_delivered = total_delivered + ?, calculated_at = CURRENT_TIMESTAMP WHERE broadcast_id = ?

# ===============================================
# outbox_events queries
# ===============================================
outbox.save = INSERT INTO outbox_events (id, aggregate_type, aggregate_id, event_type, topic, payload) VALUES (?, ?, ?, ?, ?, ?)
outbox.batchSave = INSERT INTO outbox_events (id, aggregate_type, aggregate_id, event_type, topic, payload, created_at) VALUES (?, ?, ?, ?, ?, ?, ?)
outbox.findAndLock = \
    SELECT * FROM outbox_events \
    ORDER BY created_at \
    LIMIT ? \
    FOR UPDATE SKIP LOCKED
outbox.deleteByIds.template = DELETE FROM outbox_events WHERE id IN (%s)

# ===============================================
# dlt_messages queries
# ===============================================
dlt.save = INSERT INTO dlt_messages (id, broadcast_id, original_key, original_topic, original_partition, original_offset, exception_message, original_message_payload, failed_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
dlt.findAll = SELECT * FROM dlt_messages ORDER BY failed_at DESC
dlt.findById = SELECT * FROM dlt_messages WHERE id = ?
dlt.deleteById = DELETE FROM dlt_messages WHERE id = ?
dlt.deleteAll = DELETE FROM dlt_messages

# ===============================================
# user_preferences queries (No refactoring needed as it's already using a template-like approach)
# ===============================================